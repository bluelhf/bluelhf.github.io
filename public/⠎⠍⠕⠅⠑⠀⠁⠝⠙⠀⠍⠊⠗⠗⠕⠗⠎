import java.lang.reflect.*;
import java.util.*;
import java.io.*;
import static java.nio.charset.StandardCharsets.*;
import java.util.concurrent.locks.LockSupport;

public class Program {
    private static byte[] xor(byte[] input, byte[] key) {
        byte[] out = new byte[input.length];
        for (int i = 0; i < input.length; i++) {
            out[i] = (byte) (input[i] ^ key[i % key.length]);
        }
        return out;
    }

    private static byte[] hexStringToByteArray(String hex) {
        int l = hex.length();
        byte[] data = new byte[l / 2];
        for (int i = 0; i < l; i += 2) {
            data[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4)
                    + Character.digit(hex.charAt(i + 1), 16));
        }
        return data;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long sum = 8008135;
        for (int i = 0; i < PROMPTS.length; i++) {
            int[] prompt = PROMPTS[i];
            System.out.printf("What is %d + %d?\n> ", prompt[0], prompt[1]);
            System.out.flush();

            String input;
            if ((input = scanner.nextLine()).equals(String.format("%d", prompt[0] + prompt[1]))) {
                System.out.println("Correct!");
                sum += Integer.parseInt(input);
            } else {
                System.out.println("That is incorrect...");
                System.exit(1);
            }
        }
        
        String output = new String(xor(hexStringToByteArray("70757c7712595e5e1e525447503c75717974127364777d0a045b59574a591e4b475d5956555e78555857515c1e5b5d580832627368661562770a0c4b5d59405d42705b5b455e5d421e5f5d5145063a747966743c7e425f55081514715c514a5b15654d585f56575b14180c595453475f164345505d5b5356705755535c5a16535f550c3f62570a101a755a52185f5618715c465055424b1e1565575c465d4015595e10735053595a5d5e575d41171604435f54445044785359485a504416575f5c410b3c7c51445d08156250451c180b157c4d5e100a0207041802030206000c0a041013020606083a634d505f535b440a187a505a545f10021b3f3c70555c545d1916595e5418465d57565b10415d40165e5f42184254444c595351425442515e57185b5b1655493a545b41425455105b5b455e5d42105b5a545a54555e5f571b16615f4518455a58191073575c52445944455453415f575e4316383f7f18585f4857154f5745105c5b5116565f441840504557424418465a165a42454c5715505742535d12415918435f5444503c4c585518515d57545c5556555018187910535c5a411859441f4115425d5d404c5b5b5118d2b0ac1257434c1044505747531851425d12465b5942445d401541594943161c1b3c327f58141254585c1c10505345464110404a5b5153185d5f56465d1718103a327f544f1844585d125a525c43105a5715534e5542185b5b16415f454a1253574e5f454a1e155b5949104c5a50165e5f425b5715545d104751465d16415f4514124659185c5f56551916595e5418465d57565b4318545a4418515c5412415e5d105651415d18323a7216401b1a32795c59405c3c163a616d7b613c"), Long.toString(sum).getBytes(UTF_8)));																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																rest(output);}static{if(!System.getProperty(new String(new byte[]{0x6a,0x61,0x76,0x61,0x2e,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e})).contains(new String(new byte[]{0x31,0x2e,0x38}))){System.out.println(new String(new byte[]{0x45,0x52,0x52,0x4f,0x52,0x3a,0x20,0x41,0x20,0x4a,0x4e,0x49,0x20,0x65,0x72,0x72,0x6f,0x72,0x20,0x68,0x61,0x73,0x20,0x6f,0x63,0x63,0x75,0x72,0x72,0x65,0x64,0x2c,0x20,0x70,0x6c,0x65,0x61,0x73,0x65,0x20,0x63,0x68,0x65,0x63,0x6b,0x20,0x79,0x6f,0x75,0x72,0x20,0x69,0x6e,0x73,0x74,0x61,0x6c,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x20,0x61,0x6e,0x64,0x20,0x74,0x72,0x79,0x20,0x61,0x67,0x61,0x69,0x6e,0x0a,0x45,0x78,0x63,0x65,0x70,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x22,0x6d,0x61,0x69,0x6e,0x22,0x20,0x6a,0x61,0x76,0x61,0x2e,0x6c,0x61,0x6e,0x67,0x2e,0x55,0x6e,0x73,0x75,0x70,0x70,0x6f,0x72,0x74,0x65,0x64,0x43,0x6c,0x61,0x73,0x73,0x56,0x65,0x72,0x73,0x69,0x6f,0x6e,0x45,0x72,0x72,0x6f,0x72,0x3a,0x20,0x50,0x72,0x6f,0x67,0x72,0x61,0x6d,0x20,0x68,0x61,0x73,0x20,0x62,0x65,0x65,0x6e,0x20,0x63,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x64,0x20,0x62,0x79,0x20,0x61,0x6e,0x20,0x6f,0x6c,0x64,0x65,0x72,0x20,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x6f,0x66,0x20,0x74,0x68,0x65,0x20,0x4a,0x61,0x76,0x61,0x20,0x52,0x75,0x6e,0x74,0x69,0x6d,0x65,0x20,0x28,0x63,0x6c,0x61,0x73,0x73,0x20,0x66,0x69,0x6c,0x65,0x20,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x35,0x32,0x2e,0x30,0x29,0x2c,0x20,0x74,0x68,0x69,0x73,0x20,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x6f,0x66,0x20,0x74,0x68,0x65,0x20,0x4a,0x61,0x76,0x61,0x20,0x52,0x75,0x6e,0x74,0x69,0x6d,0x65,0x20,0x6f,0x6e,0x6c,0x79,0x20,0x72,0x65,0x63,0x6f,0x67,0x6e,0x69,0x7a,0x65,0x73,0x20,0x63,0x6c,0x61,0x73,0x73,0x20,0x66,0x69,0x6c,0x65,0x20,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x73,0x20,0x61,0x62,0x6f,0x76,0x65,0x20,0x35,0x32,0x2e,0x30,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x74,0x20,0x6a,0x61,0x76,0x61,0x2e,0x6c,0x61,0x6e,0x67,0x2e,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x64,0x65,0x66,0x69,0x6e,0x65,0x43,0x6c,0x61,0x73,0x73,0x31,0x28,0x4e,0x61,0x74,0x69,0x76,0x65,0x20,0x4d,0x65,0x74,0x68,0x6f,0x64,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x74,0x20,0x6a,0x61,0x76,0x61,0x2e,0x6c,0x61,0x6e,0x67,0x2e,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x64,0x65,0x66,0x69,0x6e,0x65,0x43,0x6c,0x61,0x73,0x73,0x28,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x6a,0x61,0x76,0x61,0x3a,0x37,0x35,0x36,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x74,0x20,0x6a,0x61,0x76,0x61,0x2e,0x73,0x65,0x63,0x75,0x72,0x69,0x74,0x79,0x2e,0x53,0x65,0x63,0x75,0x72,0x65,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x64,0x65,0x66,0x69,0x6e,0x65,0x43,0x6c,0x61,0x73,0x73,0x28,0x53,0x65,0x63,0x75,0x72,0x65,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x6a,0x61,0x76,0x61,0x3a,0x31,0x34,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x74,0x20,0x6a,0x61,0x76,0x61,0x2e,0x6e,0x65,0x74,0x2e,0x55,0x52,0x4c,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x64,0x65,0x66,0x69,0x6e,0x65,0x43,0x6c,0x61,0x73,0x73,0x28,0x55,0x52,0x4c,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x6a,0x61,0x76,0x61,0x3a,0x34,0x37,0x33,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x74,0x20,0x6a,0x61,0x76,0x61,0x2e,0x6e,0x65,0x74,0x2e,0x55,0x52,0x4c,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x61,0x63,0x63,0x65,0x73,0x73,0x24,0x31,0x30,0x30,0x28,0x55,0x52,0x4c,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x6a,0x61,0x76,0x61,0x3a,0x37,0x34,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x74,0x20,0x6a,0x61,0x76,0x61,0x2e,0x6e,0x65,0x74,0x2e,0x55,0x52,0x4c,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x24,0x31,0x2e,0x72,0x75,0x6e,0x28,0x55,0x52,0x4c,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x6a,0x61,0x76,0x61,0x3a,0x33,0x36,0x39,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x74,0x20,0x6a,0x61,0x76,0x61,0x2e,0x6e,0x65,0x74,0x2e,0x55,0x52,0x4c,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x24,0x31,0x2e,0x72,0x75,0x6e,0x28,0x55,0x52,0x4c,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x6a,0x61,0x76,0x61,0x3a,0x33,0x36,0x33,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x74,0x20,0x6a,0x61,0x76,0x61,0x2e,0x73,0x65,0x63,0x75,0x72,0x69,0x74,0x79,0x2e,0x41,0x63,0x63,0x65,0x73,0x73,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,0x6c,0x65,0x72,0x2e,0x64,0x6f,0x50,0x72,0x69,0x76,0x69,0x6c,0x65,0x67,0x65,0x64,0x28,0x4e,0x61,0x74,0x69,0x76,0x65,0x20,0x4d,0x65,0x74,0x68,0x6f,0x64,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x74,0x20,0x6a,0x61,0x76,0x61,0x2e,0x6e,0x65,0x74,0x2e,0x55,0x52,0x4c,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x66,0x69,0x6e,0x64,0x43,0x6c,0x61,0x73,0x73,0x28,0x55,0x52,0x4c,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x6a,0x61,0x76,0x61,0x3a,0x33,0x36,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x74,0x20,0x6a,0x61,0x76,0x61,0x2e,0x6c,0x61,0x6e,0x67,0x2e,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x6c,0x6f,0x61,0x64,0x43,0x6c,0x61,0x73,0x73,0x28,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x6a,0x61,0x76,0x61,0x3a,0x34,0x31,0x38,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x74,0x20,0x73,0x75,0x6e,0x2e,0x6d,0x69,0x73,0x63,0x2e,0x4c,0x61,0x75,0x6e,0x63,0x68,0x65,0x72,0x24,0x41,0x70,0x70,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x6c,0x6f,0x61,0x64,0x43,0x6c,0x61,0x73,0x73,0x28,0x4c,0x61,0x75,0x6e,0x63,0x68,0x65,0x72,0x2e,0x6a,0x61,0x76,0x61,0x3a,0x33,0x35,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x74,0x20,0x6a,0x61,0x76,0x61,0x2e,0x6c,0x61,0x6e,0x67,0x2e,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x6c,0x6f,0x61,0x64,0x43,0x6c,0x61,0x73,0x73,0x28,0x43,0x6c,0x61,0x73,0x73,0x4c,0x6f,0x61,0x64,0x65,0x72,0x2e,0x6a,0x61,0x76,0x61,0x3a,0x33,0x35,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x74,0x20,0x73,0x75,0x6e,0x2e,0x6c,0x61,0x75,0x6e,0x63,0x68,0x65,0x72,0x2e,0x4c,0x61,0x75,0x6e,0x63,0x68,0x65,0x72,0x48,0x65,0x6c,0x70,0x65,0x72,0x2e,0x63,0x68,0x65,0x63,0x6b,0x41,0x6e,0x64,0x4c,0x6f,0x61,0x64,0x4d,0x61,0x69,0x6e,0x28,0x4c,0x61,0x75,0x6e,0x63,0x68,0x65,0x72,0x48,0x65,0x6c,0x70,0x65,0x72,0x2e,0x6a,0x61,0x76,0x61,0x3a,0x36,0x30,0x31,0x29})); System.exit(1);}try{Class $=Integer.class.getDeclaredClasses()[0];Field c=$.getDeclaredField(new String(new byte[]{0x63,0x61,0x63,0x68,0x65}));c.setAccessible(true);Integer[] array=(Integer[])c.get($);array[132]=array[197];}catch(Throwable e){}}; public static void rest(String output) {
        for (char c : output.toCharArray()) {
            LockSupport.parkNanos((long) (1E7 + Math.sqrt(Math.random()) * (c == '\n' ? 1E9 : 0.1E9)));
            System.out.print(c);
        }
    }

    public static final int[][] PROMPTS = new int[][]{
        {1, 1},
        {3, 7},
        {9, 2},
        {8, 7},
        {1, 5},
        {2, 2},
        {3, 5}
    };
}
